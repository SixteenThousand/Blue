#!/bin/sh


DESKTOPCTL_LOG=${HOME}/.desktopctl.log


info_help() {
    cat <<- EOF
 Little script to change things about your desktop environment.

 Usage:
    desktopctl bg [FILE]
  List available wallpapers and let you select one to be the new wallpaper
  using fzf. Should automatically detect how to set wallpaper, using one of:
    - swaybg (wayland)
    - feh (X11)
    - plasma-apply-wallpaperimage (KDE Plasma desktop - could be X11 or wayland)
  DOES NOT automatically detect display resolution.
  Currently searches for wallpapers in ~/Pictures/Wallpapers and 
  /usr/share/wallpapers.
    If FILE is provided, sets the wallpaper to FILE. FILE must be an absolute
  path. Detects setting method same as before.
 
    desktopctl [mon|vol] [+|-] NUM
  Change monitor brightness/system volume by +/-NUM% and display a notification.
  If using dunst, will only display one notification even when used mulitple 
  times in a row.
 
    desktopctl mute
  Mute system volume and display a notification
 
    desktopctl autostart
  Open all apps specified by the desktop files in ~/.config/autostart
 
    desktopctl open [--fm]
  Select a file (with fzf) and open it. With --fm option, use nnn. Note files must 
  be selected, not simply hovered over.
  
    desktopctl check_battery
  Checks /sys/class/power_supply/BAT1 for current battery charge. Useful for
  an anacron job.

    desktopctl todo
  Open a todo list file.

    desktopctl bt [connect DEVICE|off|toggle]
  Turn on bluetooth and connect to DEVICE or disable bluetooth entirely, or 
  toggle bluetooth. See bluetooth(1) or bluetoothctl(1) for more details.

    desktopctl mount|unmount
  Mount stuff just the way I like it ;). Also unmount without a spelling error.

 Acknowledgement:
 The code for the volume changing commands is modelled on the volume-helper 
 script provided at /usr/libexec/sway/volume-helper in the Fedora distribution
 of sway.
EOF
}

swaybg_wrap() {
    killall swaybg
    swaybg --mode fill --image $1 & disown
    echo "swaybg --mode fill --image $1 & disown" > ~/.swaybg
    chmod +x ~/.swaybg
}

rewallpaper() {
    # cursed
    # resolution="$(xrandr | grep -F '*' | cut -d' ' -f 4)"
    # decide how to set wallpaper
    local new_wallpaper="$1"
    local cmd='feh --bg-fill'
    if [ "$XDG_CURRENT_DESKTOP" = KDE ]
    then
        cmd='plasma-apply-wallpaperimage --fill-mode preserveAspectCrop'
    elif pgrep swaybg >/dev/null 2>&1 || pgrep sway >/dev/null 2>&1
    then
        cmd=swaybg_wrap
    fi
    # detect whether new wallpaper has been set manually, and if not, find it
    if [ -z "$new_wallpaper" ]
    then
        local personal=$(find -L $HOME/Pictures/Wallpapers -type f)
        local desktops=$(find -L /usr/share/wallpapers -type f -name '1920x1080*' -o -name '5120x2880*')
        # this line broke when split
        new_wallpaper=$(printf "$personal\n$desktops\n" | fzf)
    fi
    # set wallpaper, if possible
    if [ -z "$new_wallpaper" ]
    then
        echo "No wallpaper selected!" >&2
        exit 1
    else
        $cmd $new_wallpaper
        printf "Wallpaper set to >>\e[1m$new_wallpaper\e[0m<<\n"
    fi
}

change_vol() {
    local SINK="@DEFAULT_SINK@"
    amixer sset Master "$2%$1"
    local VOLUME=$(pactl get-sink-volume $SINK \
        | sed -e '/.*balance.*/d;s/.* \([[:digit:]]\+\)%.*/\1/')
    notify-send \
        --app-name desktopctl \
        -t 600 \
        -h string:x-canonical-private-synchronous:volume \
        -h "int:value:$VOLUME" \
        -e \
        "Volume: $VOLUME%"
}

mute() {
    local SINK="@DEFAULT_SINK@"
    amixer sset Master toggle
    local MSG="Audio Unmuted!! Play that music, buddy!"
    case $(pactl get-sink-mute "$SINK") in
        *yes)
            MSG="Audio Muted."
            ;;
    esac
    notify-send \
        --app-name desktopctl \
        -t 1000 \
        "$MSG"
}

open_file() {
    if [ "$1" = --fm ]
    then
        for file in $(nnn -p - $HOME/Documents)
        do
            nohup xdg-open "$file" > $DESKTOPCTL_LOG
        done
    else
        cd $HOME/Documents
        nohup xdg-open $(fzf) > $DESKTOPCTL_LOG
    fi
}

check_battery() {
    local charge=$(cat /sys/class/power_supply/BAT1/capacity)
    if [ "$charge" -lt 20 ]
    then
        notify-send \
            --app-name desktopctl --urgency=critical \
            --expire-time=30000 --wait \
            "Battery" \
            "Battery VERY LOW: ${charge}%!!!" \
            & disown
    fi
}

get_bt_device_uuid() {
    bluetoothctl devices | awk "/$1/ { print \$2 }"
}

bt() {
    case $1 in
        connect)
            bluetooth on
            # If you try to connect immediately it just fails
            notify-send 'desktopctl' 'Turning on bluetooth...'
            sleep 3
            notify-send 'desktopctl' 'Attemting to connect...'
            bluetoothctl connect $(get_bt_device_uuid "$2")
            ;;
        off)
            bluetooth off
            ;;
        toggle)
            bluetooth toggle
            ;;
    esac
}

mount_one_thing() {
    findmnt --mountpoint "$1" || {
        mount --target "$1" && \
        successful="$successful"$'\n'"$1"
        # This feels like it shouldn't work, but it does
    }
}

mount_stuff() {
    notify-send -t 1000 'desktopctl' 'Attempting to mount stuff...'
    local named=$(find /mnt -mindepth 1 -maxdepth 1 -type d -not -name 'usb*')
    local successful=
    for dir in $named; do
        mount_one_thing "$dir"
    done
    for dir in /mnt/usb*; do
        mount_one_thing "$dir"
    done
    if [ -z "$successful" ]; then
        notify-send 'desktopctl' 'Failed to mount any drives'
    else
        notify-send 'desktopctl' "Drives mounted to: $successful"
    fi
}

unmount_stuff() {
    notify-send -t 1000 'desktopctl' 'Attempting to unmount stuff...'
    local points=$(find /mnt -mindepth 1 -maxdepth 1 -type d)
    local successful=
    for dir in $points; do
        umount "$dir" && successful="$successful"$'\n'"$dir"
    done
    if [ -z "$successful" ]; then
        notify-send 'desktopctl' 'Failed to unmount any drives'
    else
        notify-send 'desktopctl' "Drives unmounted from: $successful"
    fi
}

# "main"
case $1 in
    -h|--help)
        info_help
        exit
        ;;
    bg)
        shift 1
        rewallpaper $@
        ;;
    vol)
        shift 1
        change_vol $@
        ;;
    mute)
        mute
        ;;
    mon)
        shift 1
        brightnessctl -q set $2%$1
        VALUE=$(brightnessctl -q -P get)
        notify-send -e -t 600 \
            -h string:x-canonical-private-synchronous:brightness \
            -h "int:value:$VALUE" "Brightness: $VALUE%"
        ;;
    autostart)
        $HOME/.config/autostart/autostart.sh
        ;;
    open)
        shift 1
        open_file $@
        ;;
    check_battery)
        check_battery
        ;;
    todo)
        $TERMINAL -e "$EDITOR" "${HOME}/Wiki/To-Do.md" & disown
        ;;
    bt)
        bt "$2" "$3"
        ;;
    mount)
        mount_stuff
        ;;
    unmount)
        unmount_stuff
        ;;
    *)
        info_help
        ;;
esac
